########################################################################################################################
#                                                                                                                      #
#                                         NetworkPoisson -- Configuration file                                         #
#                                                                                                                      #
#                                           Lionel Cheng, CERFACS, 04.03.2021                                          #
#                                                                                                                      #
########################################################################################################################

# Contains the parameters for the model (training, etc.)

# To import the parameters, use
#     import yaml
#     with open('config.yml', 'r') as yaml_stream:
#         config = yaml.safe_load(yaml_stream)

eval:
    casename: 'cases/linsystem/'                  # Experience name
    geom: 'cartesian'
    bcs: 'dirichlet'
    xmin: 0.0
    xmax: 1.0e-2
    nnx: 101
    ymin: 0.0
    ymax: 1.0e-2
    nny: 101
    nmax_fourier: 10

network:
    casename: 'cases/network/config_3/random_4/'                  # Experience name
    n_gpu: 1                                    # Number of GPUs to use

    globals:                                    # Domain sizes and others, used to compute global attributes
        nnx: 101
        nny: 101
        xmin: 0.0
        xmax: 1.0e-2
        ymin: 0.0
        ymax: 1.0e-2
        coord: 'cart'
        verbosity: 2

    # resume: '/scratch/cfd/cheng/DL/plasmanet/NNet/outputs/101x101/models/config_2/random_4'
    resume: '/scratch/cfd/PlasmaDL/networks/train/models/config_3/random_4'

    # arch:
    #     type: 'UNet'
    #     args:
    #         in_fmaps: [1, 16, 16]
    #         down_blocks: [[16, 16, 16],
    #                     [16, 16, 16],
    #                     [16, 24, 31]]
    #         bottom_fmaps: [31, 30, 31]
    #         up_blocks: [[62, 32, 32],
    #                     [48, 32, 32],
    #                     [48, 16, 16]]
    #         out_fmaps: [32, 16, 16, 1]
    #         input_res: 101
    #         up_type: 'upsample'
    
    arch:
        db_file: 'unets_small.yml'
        name: 'UNet5'
        args:
            input_res: 101
            up_type: 'upsample'

    # arch:
    #     type: 'UNet5'
    #     args:
    #         data_channels: 1                    # For dirichlet use 2 or 3, and keep 1 or 5 for the homogeneous problem 

    # data_loader:
    #     data_channels: 1
    #     normalize: 'analytical'
    #     alpha: 0.1
    #     scaling_factor: 1.0e+6

    data_loader:
        type: 'PoissonDataLoader'
        data_channels: 1
        pipe_config: True
        args:
            data_dir: '/scratch/cfd/PlasmaDL/datasets/eval/101x101/stand_alone/random_8'
            batch_size: 200
            shuffle: True
            validation_split: 0.0               # if float, fraction of the full dataset, if int, length of validation portion
            num_workers: 4
            normalize: 'analytical'                   # max, physical or no for normalization types
            alpha: 0.1
            scaling_factor: 1.0e+6

    initializer: 'off'

    loss:
        type: 'ComposedLoss'
        pipe_config: True                       # Object initialization require config as first argument
        args:
            loss_list:                          # List of the losses to compose if ComposedLoss is used
                #- InsideLoss
                - DirichletBoundaryLoss
                - LaplacianLoss
            inside_weight: 0.                   # Weighting of the loss inside the domain, excluding boundaries (float)
            bound_weight: 1.                    # Weighting of the loss on the boundaries (float)
            elec_weight: 0.                     # Weighting of the loss on the electric field (float)
            lapl_weight: 0.1                    # Weighting of the loss on the Laplacian (float)

    metrics:
        - 'residual'
        - 'inf_norm'
        - 'Eresidual'
        - 'Einf_norm'

