########################################################################################################################
#                                                                                                                      #
#                                            cfdsolver -- Configuration file                                           #
#                                                                                                                      #
#                                           Lionel Cheng, CERFACS, 27.03.2020                                          #
#                                                                                                                      #
########################################################################################################################

# Contains the parameters for the model (training, etc.)

# To import the parameters, use
#     import yaml
#     with open('config.yml', 'r') as yaml_stream:
#         config = yaml.safe_load(yaml_stream)

casename: 'runs/kraken/dh_streamer_linsys/1e-12/'

params:
  nit: 1600
  dt: 1.0e-12
  geom: 'xr'
  photoionization: 'no'
  n_back: 1.0e+14
  #n_back: 1.0e+9
  n_gauss: 1.0e+19

transport:
  chemistry: 'morrow'

BC: 'outlet_axi'

poisson:
  backE: 4.8e+6
  type: 'lin_system'
  mat: 'cart_dirichlet'
  nmax_fourier: 10

mesh:
  xmin: 0
  ymin: 0
  xmax: 0.004
  ymax: 0.001
  nnx: 401
  nny: 101
output:
  folder: 'data/'
  save: 'iteration'
  verbose: True
  files: 'figdata'
  period: 400
  dl_save: 'no'

input: 'none'
  # ne: 'data/dh_streamer_7/ne_0004.npy'
  # np: 'data/dh_streamer_7/np_0004.npy'
  # nn: 'data/dh_streamer_7/nn_0004.npy'
  
# This block is useful only if poisson/type = 'network'
network:
  n_gpu: 1                                    # Number of GPUs to use

  globals:                                    # Domain sizes and others, used to compute global attributes
    nnx: 401
    nny: 101
    xmin: 0.0
    xmax: 4.0e-3
    ymin: 0.0
    ymax: 1.0e-3
    coord: 'cart'
    verbosity: 2

  resume: '/scratch/cfd/ajuria/Plasma/plasmanet_new/plasmanet/NNet/train_cyl/rectangle_debug/models/UNet5_rf200/basic_train_pad/model_best.pth'
  # resume: '/scratch/cfd/PlasmaDL/networks/train/RF_study/Unet/5_scales/k_3/RF_200/models/random_8'
  
  arch:
    db_file: 'unets_ks3_rf200.yml'
    # db_file: 'unets_ks3_rf200.yml'
    name: 'UNet5'
    args:
        input_res: [101, 401]
        padding_mode: 'custom'

  data_loader:
    type: 'PoissonDataLoader'
    data_channels: 1
    pipe_config: True
    args:
      batch_size: 200
      shuffle: True
      validation_split: 0.0               # if float, fraction of the full dataset, if int, length of validation portion
      num_workers: 4
      normalize: 'analytical'                   # max, physical or no for normalization types
      alpha: 0.1
      scaling_factor: 1.0e+6

  initializer: 'off'

  loss:
    type: 'ComposedLoss'
    pipe_config: True                       # Object initialization require config as first argument
    args:
      loss_list:                          # List of the losses to compose if ComposedLoss is used
        #- InsideLoss
        - DirichletBoundaryLoss
        - LaplacianLoss
      inside_weight: 0.                   # Weighting of the loss inside the domain, excluding boundaries (float)
      bound_weight: 1.                    # Weighting of the loss on the boundaries (float)
      elec_weight: 0.                     # Weighting of the loss on the electric field (float)
      lapl_weight: 0.1                    # Weighting of the loss on the Laplacian (float)

  metrics:
    - 'residual'
    - 'inf_norm'
    - 'Eresidual'
    - 'Einf_norm'